// <auto-generated />
using System;
using EfCoreResults.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfCoreResult.Migrations
{
    [DbContext(typeof(GameLibraryContext))]
    partial class GameLibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EfCoreResult.Models.Partnership", b =>
                {
                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int?>("DeveloperId")
                        .HasColumnType("int");

                    b.HasKey("PublisherId", "DeveloperId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("Partnerships");
                });

            modelBuilder.Entity("EfCoreResult.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Budged")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("EfCoreResults.Models.DeveloperStudio", b =>
                {
                    b.Property<int>("DeveloperStudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeveloperStudioId"));

                    b.Property<string>("City")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("DeveloperStudioId");

                    b.ToTable("DeveloperStudios");
                });

            modelBuilder.Entity("EfCoreResults.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<string>("Description")
                        .HasColumnType("varchar(max)");

                    b.Property<int>("DeveloperStudioId")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<DateTime>("RealeaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GameId");

                    b.HasIndex("DeveloperStudioId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("EfCoreResult.Models.Partnership", b =>
                {
                    b.HasOne("EfCoreResults.Models.DeveloperStudio", "DeveloperStudio")
                        .WithMany("Partnerships")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCoreResult.Models.Publisher", "Publisher")
                        .WithMany("Partnership")
                        .HasForeignKey("PublisherId");

                    b.Navigation("DeveloperStudio");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("EfCoreResults.Models.Game", b =>
                {
                    b.HasOne("EfCoreResults.Models.DeveloperStudio", "developer")
                        .WithMany("DevelopedGames")
                        .HasForeignKey("DeveloperStudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("developer");
                });

            modelBuilder.Entity("EfCoreResult.Models.Publisher", b =>
                {
                    b.Navigation("Partnership");
                });

            modelBuilder.Entity("EfCoreResults.Models.DeveloperStudio", b =>
                {
                    b.Navigation("DevelopedGames");

                    b.Navigation("Partnerships");
                });
#pragma warning restore 612, 618
        }
    }
}
